// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UrbanNest.Data;

#nullable disable

namespace HouseRules.Migrations
{
    [DbContext(typeof(UrbanNestDbContext))]
    [Migration("20231019185534_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "e4ca18c2-1d00-4e1e-9bc4-1d2772b54aea",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1a8dab5-b938-4ff4-a297-535b48032848",
                            Email = "adam.welshman@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENcQGHdVPzSD2LzOV3/r7ExrXq81kMRMUFidSpITyCviyOm4x6KJlF7aMonaJ26loQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e7dc5b7-195a-49aa-808f-d7d96f800e5c",
                            TwoFactorEnabled = false,
                            UserName = "adam.w"
                        },
                        new
                        {
                            Id = "a5be3ea4-57cd-471e-9b1f-d1ac68843c71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11dd4ef2-b4d3-48f5-a6c1-4fb357e8d435",
                            Email = "stacy.lontoc@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDr0nQvkqIWTBxkwyo/pouxzA5/ICN4dql8eoCvmp2zxT6smsjg9gszBv/AR6Ig31Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6590fbc-3af9-454a-924e-ad8553dfca0e",
                            TwoFactorEnabled = false,
                            UserName = "stacy.l"
                        },
                        new
                        {
                            Id = "a1a7f10d-4c4b-4a29-ba49-6ef932eafc9a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "091da26c-8271-45f5-b15a-6702458b145f",
                            Email = "john.doe@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHIhmuU62kqjYzlQrgo8sKKUuGv+g85SJW41pcLaQSbn6TFMah8kqVr4IxvGhsr9uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe8363b0-c7cd-4e87-9bf4-72dc9d6c5697",
                            TwoFactorEnabled = false,
                            UserName = "john.d"
                        },
                        new
                        {
                            Id = "e1d0e366-1b4b-4c9c-8d99-3eefa7a6a430",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb616524-8f11-4f1b-be14-68d2823b25c2",
                            Email = "jane.smith@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECOPUwU/gf+FhlZsOkhiQTo1klF5ydIQWSvIfEm+gWiN360kFN7x9Qg9ZBmzfggVVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68757038-b97b-484e-bbc3-016565df9f3e",
                            TwoFactorEnabled = false,
                            UserName = "jane.s"
                        },
                        new
                        {
                            Id = "9a67ebd4-8f67-4f5b-9b0b-91c53fca6a6e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd7b7f1f-f8b8-4fac-afe1-640e2fb7a113",
                            Email = "robert.johnson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGTP8mYF41ATDqmtVMvqqcIZMGuEm77nHF9KHCczMNY9DpMTea4iohzOC+uEZbb96w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ff3e758-1498-4ae2-86d5-6fc77842ebdc",
                            TwoFactorEnabled = false,
                            UserName = "robert.j"
                        },
                        new
                        {
                            Id = "d6ec1cb6-8a5d-4f8a-9b3d-ee69d5b39fa2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6012feda-7ebe-4a9b-b226-3ba756f77f2d",
                            Email = "susan.miller@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAVZtn40kuveLLQmhJPMFtbsL8lQ2a7Y9unlh9stkM9kx3N4on4JxeYtKm1ncDGnJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba948e8d-60ba-4cc1-8159-7bcffa32e1b7",
                            TwoFactorEnabled = false,
                            UserName = "susan.m"
                        },
                        new
                        {
                            Id = "f3c4a859-5076-4624-95a9-d65c13a93cc6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f719d41f-46cb-40db-83ef-82c0feb3bbb6",
                            Email = "david.clark@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEHiJXV2/4KUfwwIBX0Y1LyV2AADEUnvH+RGjV/0aFKN0d5TQ5fC5iDvyr2ueYNFbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45e82771-b98d-406b-98a9-68b17a70291e",
                            TwoFactorEnabled = false,
                            UserName = "david.c"
                        },
                        new
                        {
                            Id = "7b499b14-0b71-4c2d-95fc-72585a4ce7d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b611b178-cf62-4bab-9bd9-792612e3118d",
                            Email = "linda.jackson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEF3yahiAs7U0vDaxSmqdyzw7IYO+4VEui5W6VD2BQwUjwonbUCTcDkcuQpuIA6KEaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b8fa589-e67e-4b50-9d64-012823f23a06",
                            TwoFactorEnabled = false,
                            UserName = "linda.j"
                        },
                        new
                        {
                            Id = "62cbf9d0-8bb4-4f5f-ae8b-8f66c2083b8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de5e5e1a-85ad-4fbf-9783-58f8c82e5a72",
                            Email = "william.thomas@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFjl4y0Dd1XMFA1NGj/FLG+3aejX889Yhpfn6LVN3swXxykCBlyxlisPTeEyEbAomA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a782adf-1c76-42f9-9a03-d996a8875e50",
                            TwoFactorEnabled = false,
                            UserName = "william.t"
                        },
                        new
                        {
                            Id = "7454e186-7dca-4db2-90bf-192e24d9aa88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ca2fc54-2f17-4817-9de4-b58109e8ed4b",
                            Email = "mary.roberts@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIUmbV+GEoKPvBs04l3/3QQKl7APg6BmIj3m+pw7m+gBaVhFseQpMVDeV6xQQDcOXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff210171-06b1-44e7-a3da-f2f53b5f5529",
                            TwoFactorEnabled = false,
                            UserName = "mary.r"
                        },
                        new
                        {
                            Id = "3eb94ed3-c4f2-43c3-aa8d-d0f18e3cbfe2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3b89a93-5893-48fd-8120-578d54fafc46",
                            Email = "james.harris@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEO7gGKn1zjp6FJnz5IkXb5K3TbkAbjN5EsXlqJMvRbUEuTOnmpXkDKHm0hqZetP6aA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f0a1d47-cc20-40c4-9b3e-c40317448a38",
                            TwoFactorEnabled = false,
                            UserName = "james.h"
                        },
                        new
                        {
                            Id = "f7f37e47-e2bb-4cbb-9a5e-3bb218ac3ff5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cb38a23-daf5-452a-889b-f3e94612d1d8",
                            Email = "jennifer.lewis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENF4EWmD63k0A0Yy4IPYTwvNfd4e6Yu5X4OIdlCLRnAFNk7t95B78qexu+mPelmYcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "574ddad3-406d-4dc5-92c9-16fea860265a",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.l"
                        },
                        new
                        {
                            Id = "9bea5400-fbe7-4fb9-b8ca-49c51b68c7a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "204d60c8-4f32-4a76-b056-20b4f78f7de4",
                            Email = "michael.morris@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBKtZiRMs7Al30ubTm9cTCxq8e4eTqrEfNNnhxeUTBWu7XVm9QlNViQdAGjp9DP4ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0e7ce66-df6a-46f6-ac72-52408fcf03cd",
                            TwoFactorEnabled = false,
                            UserName = "michael.m"
                        },
                        new
                        {
                            Id = "398d39f2-5ce9-4c5e-bb8e-19a0a18b493f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f588a58-771a-4429-a683-b09063198d67",
                            Email = "laura.peterson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP2u1vE0gKQrJfkc3Zm/WSUB5Pd6mch+N6Bp97kUA6edAAN5/Vv0u5CiTWq0qz6f1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d342b55-7129-45d9-8d07-dbfe937eb43a",
                            TwoFactorEnabled = false,
                            UserName = "laura.p"
                        },
                        new
                        {
                            Id = "256d7f3d-eb2d-48ec-ae0c-5f909a1259c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2798fc04-75e6-4f0c-9ba5-bf233eec4260",
                            Email = "daniel.brown@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGDgPZKTzW28L2ZgP/8gQk8zlinOITNIY8USi21Os858ZuSptVkM9lCRub/pdXr6ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "167310a5-c9e7-4340-bf0c-73c3d9bf754d",
                            TwoFactorEnabled = false,
                            UserName = "daniel.b"
                        },
                        new
                        {
                            Id = "bde34669-9337-4e86-8a77-82e416531f63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69a88471-96c8-4e56-8e27-d0af5a9422d6",
                            Email = "sandra.wilson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPsg3lMpj089Z16UwXPVe5E/VR16GGJvaMTe0aA1ZSX7qjJW00Fb5ysBTrcFCYH7CQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b34fef5e-224b-4671-b1e2-8b4300bb7416",
                            TwoFactorEnabled = false,
                            UserName = "sandra.w"
                        },
                        new
                        {
                            Id = "00b85f45-9c96-41c3-8dce-3acaf43964df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95c11252-9320-4498-b576-f6b4130131de",
                            Email = "kevin.king@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIGg03TAyXo0R7gXpsMBXiUQYdvu1DLKExOm1suRRfENQR+EKVCPa441/5cE4XWqDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d443c03d-6915-4a10-8a3f-bf9c14e56d29",
                            TwoFactorEnabled = false,
                            UserName = "kevin.k"
                        },
                        new
                        {
                            Id = "e5d832b4-1e5d-4e61-9717-8c9509ed9d54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e652d34-ff13-44bc-8a2f-011016b902e0",
                            Email = "linda.garcia@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJaUqbtd+vfC4c3z+uXlKfPy/2rTD2bHk4KxfSeJpOSF8jYbYOKvYC4O7eK3l0cZOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a8a9526-b0f5-4772-9fd8-77071fa46d22",
                            TwoFactorEnabled = false,
                            UserName = "linda.g"
                        },
                        new
                        {
                            Id = "3a5ebe8a-9a4a-46cc-8270-e789d8c115f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb7adbc5-48c2-4f72-89fb-4811960c2175",
                            Email = "joseph.hernandez@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECh4P6fspzhqZT7cUfNBa9grLS8tC6n3sIwRa0NxTdprRqNWUE6Tt9rnrSvnufiwoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae65da0b-6abe-44de-8525-56ec2f0708ba",
                            TwoFactorEnabled = false,
                            UserName = "joseph.h"
                        },
                        new
                        {
                            Id = "694b216b-f0c3-49d4-8f14-1d786750ea6c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27742870-e36e-43e9-a243-209d14033288",
                            Email = "lisa.martinez@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEC0ohHKVQ472AGUndBHrGZUq06UH/tEpvuTpZsBBpWRUFLrrDz1n//VT+RfNyb+evQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50432d4b-bc3e-4c2b-b596-5a7a1e9e672a",
                            TwoFactorEnabled = false,
                            UserName = "lisa.m"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UrbanNest.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RealEstateLicenseNumber")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RealEstateLicenseNumber = 98765432,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            RealEstateLicenseNumber = 56781234,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            RealEstateLicenseNumber = 12345678,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            RealEstateLicenseNumber = 87654321,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            RealEstateLicenseNumber = 54321678,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 6,
                            RealEstateLicenseNumber = 34567812,
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 7,
                            RealEstateLicenseNumber = 21678345,
                            UserProfileId = 7
                        },
                        new
                        {
                            Id = 8,
                            RealEstateLicenseNumber = 16783456,
                            UserProfileId = 8
                        },
                        new
                        {
                            Id = 9,
                            RealEstateLicenseNumber = 67834561,
                            UserProfileId = 9
                        },
                        new
                        {
                            Id = 10,
                            RealEstateLicenseNumber = 78345612,
                            UserProfileId = 10
                        });
                });

            modelBuilder.Entity("UrbanNest.Models.Cashflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<bool>("IsPositiveOrNegative")
                        .HasColumnType("boolean");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Cashflows");
                });

            modelBuilder.Entity("UrbanNest.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOperational")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevenueOrExpense")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UrbanNest.Models.Investor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Investors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Dream Home Investments",
                            UserProfileId = 11
                        },
                        new
                        {
                            Id = 2,
                            Company = "Prime Property Holdings",
                            UserProfileId = 12
                        },
                        new
                        {
                            Id = 3,
                            Company = "Prosperity Estates",
                            UserProfileId = 13
                        },
                        new
                        {
                            Id = 4,
                            Company = "Urban Capital Ventures",
                            UserProfileId = 14
                        },
                        new
                        {
                            Id = 5,
                            Company = "Golden Gate Realty Group",
                            UserProfileId = 15
                        },
                        new
                        {
                            Id = 6,
                            Company = "Horizon Properties, Inc.",
                            UserProfileId = 16
                        },
                        new
                        {
                            Id = 7,
                            Company = "Evergreen Investments",
                            UserProfileId = 17
                        },
                        new
                        {
                            Id = 8,
                            Company = "Oasis Real Estate Partners",
                            UserProfileId = 18
                        },
                        new
                        {
                            Id = 9,
                            Company = "Silver Key Realty Trust",
                            UserProfileId = 19
                        },
                        new
                        {
                            Id = 10,
                            Company = "Liberty Land Investments",
                            UserProfileId = 20
                        });
                });

            modelBuilder.Entity("UrbanNest.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRentOut")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfBathroom")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfBedroom")
                        .HasColumnType("integer");

                    b.Property<int>("SquareFeet")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            AgentId = 1,
                            City = "Nashville",
                            ImageURL = "https://example.com/property1.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 2,
                            NumberOfBedroom = 2,
                            SquareFeet = 1500,
                            State = "TN",
                            TypeId = 1,
                            ZipCode = "37201"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            AgentId = 2,
                            City = "Hermitage",
                            ImageURL = "https://example.com/property2.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 2,
                            NumberOfBedroom = 3,
                            SquareFeet = 1800,
                            State = "TN",
                            TypeId = 2,
                            ZipCode = "37076"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St",
                            AgentId = 3,
                            City = "Mt Juliet",
                            ImageURL = "https://example.com/property3.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 3,
                            NumberOfBedroom = 4,
                            SquareFeet = 2000,
                            State = "TN",
                            TypeId = 3,
                            ZipCode = "37122"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Pine St",
                            AgentId = 4,
                            City = "Green Hill",
                            ImageURL = "https://example.com/property4.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 1,
                            NumberOfBedroom = 2,
                            SquareFeet = 1600,
                            State = "TN",
                            TypeId = 4,
                            ZipCode = "37138"
                        },
                        new
                        {
                            Id = 5,
                            Address = "321 Oak Ln",
                            AgentId = 5,
                            City = "Franklin",
                            ImageURL = "https://example.com/property5.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 2,
                            NumberOfBedroom = 3,
                            SquareFeet = 2200,
                            State = "TN",
                            TypeId = 5,
                            ZipCode = "37064"
                        },
                        new
                        {
                            Id = 6,
                            Address = "456 Willow Dr",
                            AgentId = 6,
                            City = "Nashville",
                            ImageURL = "https://example.com/property6.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 1,
                            NumberOfBedroom = 1,
                            SquareFeet = 1400,
                            State = "TN",
                            TypeId = 6,
                            ZipCode = "37209"
                        },
                        new
                        {
                            Id = 7,
                            Address = "789 Elm St",
                            AgentId = 7,
                            City = "Hermitage",
                            ImageURL = "https://example.com/property7.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 2,
                            NumberOfBedroom = 3,
                            SquareFeet = 1800,
                            State = "TN",
                            TypeId = 1,
                            ZipCode = "37076"
                        },
                        new
                        {
                            Id = 8,
                            Address = "543 Birch Ave",
                            AgentId = 8,
                            City = "Nashville",
                            ImageURL = "https://example.com/property8.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 2,
                            NumberOfBedroom = 4,
                            SquareFeet = 2500,
                            State = "TN",
                            TypeId = 2,
                            ZipCode = "37201"
                        },
                        new
                        {
                            Id = 9,
                            Address = "101 Cedar St",
                            AgentId = 9,
                            City = "Mt Juliet",
                            ImageURL = "https://example.com/property9.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 2,
                            NumberOfBedroom = 3,
                            SquareFeet = 1800,
                            State = "TN",
                            TypeId = 3,
                            ZipCode = "37122"
                        },
                        new
                        {
                            Id = 10,
                            Address = "789 Oak St",
                            AgentId = 10,
                            City = "Franklin",
                            ImageURL = "https://example.com/property10.jpg",
                            IsActive = true,
                            IsRentOut = true,
                            NumberOfBathroom = 3,
                            NumberOfBedroom = 4,
                            SquareFeet = 2000,
                            State = "TN",
                            TypeId = 4,
                            ZipCode = "37064"
                        });
                });

            modelBuilder.Entity("UrbanNest.Models.PropertyInvestor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InvestorId")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvestorId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyInvestors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InvestorId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            InvestorId = 2,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 3,
                            InvestorId = 3,
                            PropertyId = 3
                        },
                        new
                        {
                            Id = 4,
                            InvestorId = 4,
                            PropertyId = 4
                        },
                        new
                        {
                            Id = 5,
                            InvestorId = 5,
                            PropertyId = 5
                        },
                        new
                        {
                            Id = 6,
                            InvestorId = 6,
                            PropertyId = 6
                        },
                        new
                        {
                            Id = 7,
                            InvestorId = 7,
                            PropertyId = 7
                        },
                        new
                        {
                            Id = 8,
                            InvestorId = 8,
                            PropertyId = 8
                        },
                        new
                        {
                            Id = 9,
                            InvestorId = 9,
                            PropertyId = 9
                        },
                        new
                        {
                            Id = 10,
                            InvestorId = 10,
                            PropertyId = 10
                        },
                        new
                        {
                            Id = 11,
                            InvestorId = 5,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 12,
                            InvestorId = 6,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 13,
                            InvestorId = 7,
                            PropertyId = 3
                        },
                        new
                        {
                            Id = 14,
                            InvestorId = 8,
                            PropertyId = 4
                        },
                        new
                        {
                            Id = 15,
                            InvestorId = 9,
                            PropertyId = 5
                        },
                        new
                        {
                            Id = 16,
                            InvestorId = 10,
                            PropertyId = 6
                        });
                });

            modelBuilder.Entity("UrbanNest.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Condo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Single Family House"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Apartment"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Duplex"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Townhouse"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Multi-Family Home"
                        });
                });

            modelBuilder.Entity("UrbanNest.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarURL")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            AvatarURL = "https://example.com/avatar/adam.png",
                            City = "Nashville",
                            FirstName = "Adam",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Welshman",
                            PhoneNumber = "555-123-4567",
                            State = "Tennessee",
                            ZipCode = "37201"
                        },
                        new
                        {
                            Id = 2,
                            Address = "202 Elm Street",
                            AvatarURL = "https://example.com/avatar/stacy.png",
                            City = "Nashville",
                            FirstName = "Stacy",
                            IdentityUserId = "a5be3ea4-57cd-471e-9b1f-d1ac68843c71",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Lontoc",
                            PhoneNumber = "555-234-5678",
                            State = "Tennessee",
                            ZipCode = "37202"
                        },
                        new
                        {
                            Id = 3,
                            Address = "303 Oak Street",
                            AvatarURL = "https://example.com/avatar/john.png",
                            City = "Nashville",
                            FirstName = "John",
                            IdentityUserId = "a1a7f10d-4c4b-4a29-ba49-6ef932eafc9a",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Doe",
                            PhoneNumber = "555-345-6789",
                            State = "Tennessee",
                            ZipCode = "37203"
                        },
                        new
                        {
                            Id = 4,
                            Address = "404 Pine Street",
                            AvatarURL = "https://example.com/avatar/jane.png",
                            City = "Nashville",
                            FirstName = "Jane",
                            IdentityUserId = "e1d0e366-1b4b-4c9c-8d99-3eefa7a6a430",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Smith",
                            PhoneNumber = "555-456-7890",
                            State = "Tennessee",
                            ZipCode = "37204"
                        },
                        new
                        {
                            Id = 5,
                            Address = "505 Cedar Street",
                            AvatarURL = "https://example.com/avatar/robert.png",
                            City = "Nashville",
                            FirstName = "Robert",
                            IdentityUserId = "9a67ebd4-8f67-4f5b-9b0b-91c53fca6a6e",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Johnson",
                            PhoneNumber = "555-567-8901",
                            State = "Tennessee",
                            ZipCode = "37205"
                        },
                        new
                        {
                            Id = 6,
                            Address = "606 Walnut Street",
                            AvatarURL = "https://example.com/avatar/susan.png",
                            City = "Nashville",
                            FirstName = "Susan",
                            IdentityUserId = "d6ec1cb6-8a5d-4f8a-9b3d-ee69d5b39fa2",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Miller",
                            PhoneNumber = "555-678-9012",
                            State = "Tennessee",
                            ZipCode = "37206"
                        },
                        new
                        {
                            Id = 7,
                            Address = "707 Maple Street",
                            AvatarURL = "https://example.com/avatar/david.png",
                            City = "Nashville",
                            FirstName = "David",
                            IdentityUserId = "f3c4a859-5076-4624-95a9-d65c13a93cc6",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Clark",
                            PhoneNumber = "555-789-0123",
                            State = "Tennessee",
                            ZipCode = "37207"
                        },
                        new
                        {
                            Id = 8,
                            Address = "808 Oak Street",
                            AvatarURL = "https://example.com/avatar/linda.png",
                            City = "Nashville",
                            FirstName = "Linda",
                            IdentityUserId = "7b499b14-0b71-4c2d-95fc-72585a4ce7d7",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Jackson",
                            PhoneNumber = "555-890-1234",
                            State = "Tennessee",
                            ZipCode = "37208"
                        },
                        new
                        {
                            Id = 9,
                            Address = "909 Pine Street",
                            AvatarURL = "https://example.com/avatar/william.png",
                            City = "Nashville",
                            FirstName = "William",
                            IdentityUserId = "62cbf9d0-8bb4-4f5f-ae8b-8f66c2083b8c",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Thomas",
                            PhoneNumber = "555-012-3456",
                            State = "Tennessee",
                            ZipCode = "37209"
                        },
                        new
                        {
                            Id = 10,
                            Address = "1010 Elm Street",
                            AvatarURL = "https://example.com/avatar/mary.png",
                            City = "Nashville",
                            FirstName = "Mary",
                            IdentityUserId = "7454e186-7dca-4db2-90bf-192e24d9aa88",
                            IsActive = true,
                            JoinedDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Roberts",
                            PhoneNumber = "555-123-4567",
                            State = "Tennessee",
                            ZipCode = "37210"
                        },
                        new
                        {
                            Id = 11,
                            Address = "111 Main Street",
                            AvatarURL = "https://example.com/avatar/james.png",
                            City = "Nashville",
                            FirstName = "James",
                            IdentityUserId = "3eb94ed3-c4f2-43c3-aa8d-d0f18e3cbfe2",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Harris",
                            PhoneNumber = "555-234-5678",
                            State = "Tennessee",
                            ZipCode = "37211"
                        },
                        new
                        {
                            Id = 12,
                            Address = "121 Elm Street",
                            AvatarURL = "https://example.com/avatar/jennifer.png",
                            City = "Nashville",
                            FirstName = "Jennifer",
                            IdentityUserId = "f7f37e47-e2bb-4cbb-9a5e-3bb218ac3ff5",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Lewis",
                            PhoneNumber = "555-345-6789",
                            State = "Tennessee",
                            ZipCode = "37212"
                        },
                        new
                        {
                            Id = 13,
                            Address = "131 Oak Street",
                            AvatarURL = "https://example.com/avatar/michael.png",
                            City = "Nashville",
                            FirstName = "Michael",
                            IdentityUserId = "9bea5400-fbe7-4fb9-b8ca-49c51b68c7a9",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Morris",
                            PhoneNumber = "555-456-7890",
                            State = "Tennessee",
                            ZipCode = "37213"
                        },
                        new
                        {
                            Id = 14,
                            Address = "141 Pine Street",
                            AvatarURL = "https://example.com/avatar/laura.png",
                            City = "Nashville",
                            FirstName = "Laura",
                            IdentityUserId = "398d39f2-5ce9-4c5e-bb8e-19a0a18b493f",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Peterson",
                            PhoneNumber = "555-567-8901",
                            State = "Tennessee",
                            ZipCode = "37214"
                        },
                        new
                        {
                            Id = 15,
                            Address = "151 Elm Street",
                            AvatarURL = "https://example.com/avatar/daniel.png",
                            City = "Nashville",
                            FirstName = "Daniel",
                            IdentityUserId = "256d7f3d-eb2d-48ec-ae0c-5f909a1259c1",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Brown",
                            PhoneNumber = "555-678-9012",
                            State = "Tennessee",
                            ZipCode = "37215"
                        },
                        new
                        {
                            Id = 16,
                            Address = "161 Oak Street",
                            AvatarURL = "https://example.com/avatar/sandra.png",
                            City = "Nashville",
                            FirstName = "Sandra",
                            IdentityUserId = "bde34669-9337-4e86-8a77-82e416531f63",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Wilson",
                            PhoneNumber = "555-789-0123",
                            State = "Tennessee",
                            ZipCode = "37216"
                        },
                        new
                        {
                            Id = 17,
                            Address = "171 Pine Street",
                            AvatarURL = "https://example.com/avatar/kevin.png",
                            City = "Nashville",
                            FirstName = "Kevin",
                            IdentityUserId = "00b85f45-9c96-41c3-8dce-3acaf43964df",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "King",
                            PhoneNumber = "555-890-1234",
                            State = "Tennessee",
                            ZipCode = "37217"
                        },
                        new
                        {
                            Id = 18,
                            Address = "181 Elm Street",
                            AvatarURL = "https://example.com/avatar/linda.png",
                            City = "Nashville",
                            FirstName = "Linda",
                            IdentityUserId = "e5d832b4-1e5d-4e61-9717-8c9509ed9d54",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Garcia",
                            PhoneNumber = "555-012-3456",
                            State = "Tennessee",
                            ZipCode = "37218"
                        },
                        new
                        {
                            Id = 19,
                            Address = "191 Oak Street",
                            AvatarURL = "https://example.com/avatar/joseph.png",
                            City = "Nashville",
                            FirstName = "Joseph",
                            IdentityUserId = "3a5ebe8a-9a4a-46cc-8270-e789d8c115f9",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Hernandez",
                            PhoneNumber = "555-123-4567",
                            State = "Tennessee",
                            ZipCode = "37219"
                        },
                        new
                        {
                            Id = 20,
                            Address = "201 Pine Street",
                            AvatarURL = "https://example.com/avatar/lisa.png",
                            City = "Nashville",
                            FirstName = "Lisa",
                            IdentityUserId = "694b216b-f0c3-49d4-8f14-1d786750ea6c",
                            IsActive = true,
                            JoinedDate = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Martinez",
                            PhoneNumber = "555-234-5678",
                            State = "Tennessee",
                            ZipCode = "37220"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UrbanNest.Models.Agent", b =>
                {
                    b.HasOne("UrbanNest.Models.UserProfile", "UserProfile")
                        .WithMany("Agents")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UrbanNest.Models.Cashflow", b =>
                {
                    b.HasOne("UrbanNest.Models.Category", "Category")
                        .WithMany("Cashflows")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanNest.Models.Property", "Property")
                        .WithMany("Cashflows")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("UrbanNest.Models.Investor", b =>
                {
                    b.HasOne("UrbanNest.Models.UserProfile", "UserProfile")
                        .WithMany("Investors")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UrbanNest.Models.Property", b =>
                {
                    b.HasOne("UrbanNest.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("UrbanNest.Models.PropertyInvestor", b =>
                {
                    b.HasOne("UrbanNest.Models.Investor", "Investor")
                        .WithMany()
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanNest.Models.Property", "Property")
                        .WithMany("PropertyInvestors")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investor");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("UrbanNest.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("UrbanNest.Models.Category", b =>
                {
                    b.Navigation("Cashflows");
                });

            modelBuilder.Entity("UrbanNest.Models.Property", b =>
                {
                    b.Navigation("Cashflows");

                    b.Navigation("PropertyInvestors");
                });

            modelBuilder.Entity("UrbanNest.Models.UserProfile", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Investors");
                });
#pragma warning restore 612, 618
        }
    }
}
